!member_constituencies$asking_member_name %in% values_to_remove, ]
member_constituencies
search_box_path <- list('//*[@id="search"]')
names(search_box_path) <- "search_box"
# Remove questions from Members who were removed from office mid-year
values_to_remove <- c("Neil Parish", "Kate Green")
# Remove values
member_constituencies <- member_constituencies[
!member_constituencies$asking_member_name %in% values_to_remove, ]
search_box_path <- list('//*[@id="search"]')
names(search_box_path) <- "search_box"
url <- "https://www.ons.gov.uk/visualisations/areas/"
geography_ids <- get_geo_ids(url, search_box_path)
# Apply the function to each element in the list
cleaned_geo_ids <- lapply(geography_ids, clean_geo_id)
clean_geo_id <- function(input_string) {
# Extract text within parentheses
geo_id_processed <- regmatches(input_string,
regexpr("\\(([^)]+)\\)",
input_string))
# Remove parentheses
geo_clean <- gsub("[()]", "", geo_id_processed)
# Return the cleaned result
return(geo_clean)
}
# Apply the function to each element in the list
cleaned_geo_ids <- lapply(geography_ids, clean_geo_id)
member_constituencies$geo_ids <- unlist(cleaned_geo_ids)
member_constituencies$region <- get_regions(member_constituencies)
get_regions <- function(df){
base_url <- 'https://www.ons.gov.uk/visualisations/areas/'
regions <- c()
for (constituency_id in df$geo_ids){
cat("Getting data for ", constituency_id, "\n")
url <- paste0(base_url, constituency_id, "/")
html_content <- read_html(url)
link_data <- get_all_links(html_content)
link_data$link_texts
region <- get_region(link_data)
regions <- c(regions, region)
}
return(regions)
}
member_constituencies$region <- get_regions(member_constituencies)
member_constituencies <- member_constituencies %>%
subset(region %in% c("England", "Wales"))
# Connect to the SQLite database
db <- dbConnect(RSQLite::SQLite(), database)
# Write the processed data into the database
dbWriteTable(db, "member_details", member_constituencies, overwrite = TRUE)
# Disconnect from the database
dbDisconnect(db)
member_constituencies <- member_constituencies %>%
mutate(asking_member_party = ifelse(
asking_member_party %in% c("Conservative",
"Labour",
"Scottish National Party"),
asking_member_party,
"Other"))
member_constituencies <- dbGetQuery(db,
"SELECT asking_member_name,
asking_member_from,
asking_member_party,
health_welfare_proportion,
economic_proportion,
region
FROM member_details")
# Connect to the SQLite database
db <- dbConnect(RSQLite::SQLite(), database)
member_constituencies <- dbGetQuery(db,
"SELECT asking_member_name,
asking_member_from,
asking_member_party,
health_welfare_proportion,
economic_proportion,
region
FROM member_details")
# Disconnect from the database
dbDisconnect(db)
# Connect to the SQLite database
db <- dbConnect(RSQLite::SQLite(), database)
member_constituencies <- dbGetQuery(db,
"SELECT asking_member_name,
asking_member_from,
asking_member_party,
health_welfare_proportion,
economic_proportion,
region
FROM member_details")
View(member_constituencies)
output_areas
output_areas <- read_csv('database/Output_area_(2021)_to_future_Parliamentary_Constituencies_Lookup_in_England_and_Wales.csv') %>% select(PCON25NM,OA21CD)
pc_area_ids <- merge(member_constituencies,
output_areas,
by.x = "asking_member_from",
by.y = "PCON25NM",
all.x= TRUE)
pc_area_ids
oa_area_ids <- merge(pc_area_ids,
geography_nomis,
by.x = "OA21CD",
by.y = "description.en",
all.x= TRUE)
oa_area_ids
is.na(oa_area_ids$id)
subset(oa_area_ids, is.na(id))
oa_area_ids <- merge(pc_area_ids,
geography_nomis,
by.x = "OA21CD",
by.y = "label.en",
all.x= TRUE)
subset(oa_area_ids, is.na(id))
general_health <- read_csv('database/RM044-2021-2-filtered-2023-12-29T15_14_29Z.csv')
member_constituencies
merged_data <- left_join(member_constituencies,
general_health_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
merged_data
subset(oa_area_ids, is.na(id))
View(oa_area_ids)
subset(oa_area_ids, is.na(id))
general_health <- read_csv('database/RM044-2021-2-filtered-2023-12-29T15_14_29Z.csv')
general_health_processed <- general_health %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
proportion_good = sum(Observation[`General health (6 categories)` %in% c("Very good health", "Good health")]) /
sum(Observation),
proportion_bad = sum(Observation[`General health (6 categories)` %in% c("Very bad health", "Bad health")]) /
sum(Observation)
) %>%
ungroup()
general_health_processed
general_health <- read_csv('data/RM044-2021-2-filtered-2023-12-29T15_14_29Z.csv')
general_health_processed <- general_health %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
proportion_good = sum(Observation[`General health (6 categories)` %in% c("Very good health", "Good health")]) /
sum(Observation),
proportion_bad = sum(Observation[`General health (6 categories)` %in% c("Very bad health", "Bad health")]) /
sum(Observation)
) %>%
ungroup()
health_data <- left_join(member_constituencies,
general_health_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
health_data
general_health_processed <- general_health %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
proportion_good = sum(Observation[`General health (6 categories)` %in% c("Very good health", "Good health")]) /
sum(Observation)
) %>%
ungroup()
health_data <- left_join(member_constituencies,
general_health_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
ggplot(merged_data_parties, aes(x = proportion_good, y = health_welfare_proportion)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
ggplot(health_data, aes(x = proportion_good, y = health_welfare_proportion)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
ggplot(health_data, aes(x = proportion_good,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
health_data
is.na(health_data)
health_data[is.na(health_data)]
health_data[apply(is.na(health_data), 1, any), ]
asking_member_from)
member_constituencies <- member_constituencies %>%
mutate(asking_member_from = ifelse(asking_member_from == "Weston-super-Mare",
"Weston-Super-Mare",
asking_member_from))
general_health <- read_csv('data/RM044-2021-2-filtered-2023-12-29T15_14_29Z.csv')
general_health_processed <- general_health %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
proportion_good = sum(Observation[`General health (6 categories)` %in% c("Very good health", "Good health")]) /
sum(Observation)
) %>%
ungroup()
health_data <- left_join(member_constituencies,
general_health_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
health_data[apply(is.na(health_data), 1, any), ]
ggplot(health_data, aes(x = proportion_good,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
england_wales <- st_as_sf(ne_countries(geounit = c("England",
"Wales"),
type = "map_units"))
constituencies_shp <- read_sf("data/
Westminster_Parliamentary_Constituencies_
Dec_2021_UK_BFE_2022_-7013535748659767197/
PCON_DEC_2021_UK_BFE.shp")
constituencies_shp <- read_sf(paste0("data/",
"Westminster_Parliamentary_Constituencies_",
"Dec_2021_UK_BFE_2022_-7013535748659767197/",
"PCON_DEC_2021_UK_BFE.shp"))
constituencies_shp_merged <- constituencies_shp |>
left_join(health_data,
by = join_by(PCON21NM == asking_member_from))
tmap_options(output.size = 12,10)
vis <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "asking_member_party", palette = c("lightblue", "lightcoral", "grey80")) +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a different color or thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=0.8)
vis
constituencies_shp_merged
health_data
constituencies_shp
constituencies_shp_merged
constituencies_shp_merged <- constituencies_shp %>%
left_join(health_data,
by = join_by(PCON21NM == asking_member_from)) %>%
#remove rows that are not a aprt of our analysis
filter(!is.na(region))
constituencies_shp_merged
tmap_options(output.size = 12,10)
vis <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "asking_member_party", palette = c("lightblue", "lightcoral", "grey80")) +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a different color or thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=0.8)
vis
vis <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "asking_member_party", palette = c("lightblue", "lightcoral", "grey80")) +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a different color or thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
vis
vis <- tm_shape(constituencies_shp_merged) +
tm_borders() +
tm_fill(
col = "proportion_good",
palette = "Blues",  # Choose a color palette
style = "cont",
alpha = 0.7
) +
tm_layout(title = "Constituency Map")
vis
tmap_options(output.size = 12)
parties <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "asking_member_party", palette = c("lightblue", "lightcoral", "grey80")) +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a different color or thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
health_map <- tm_shape(constituencies_shp_merged) +
tm_borders() +
tm_fill(
col = "proportion_good",
palette = "Blues",  # Choose a color palette
style = "cont",
alpha = 0.7
) +
tm_layout(title = "Constituency Map")
tmap_arrange(parties, health_map, ncol = 2)
check_table("member_details", database)
check_table <- function(db_dir, table) { # Checks existence of a table
db <- dbConnect(RSQLite::SQLite(), db_dir) # Connect to the SQLite database
if (dbExistsTable(db, table)) { # Check if the table exists in the database
# Query to get the count of rows in the table
row_query <- paste0("SELECT COUNT(*) FROM ", table)
row_count <- dbGetQuery(db, row_query) # Execute the row count query
# Query to get information about columns
col_names <- dbGetQuery(db, sprintf("PRAGMA table_info(%s)", table))
num_columns <- nrow(col_names) # Get the number of columns
dbDisconnect(db) # Disconnect from the database
return(cat( # Return a concatenated string with information about the table
table, " exists.\n",
"It has ",
row_count$`COUNT(*)`,
" rows and ",
num_columns,
" columns. The column names are:\n",
paste(col_names$name,
collapse = ", "),
"\n"
))
} else {# Return a message indicating that the table does not exist
dbDisconnect(db) # Disconnect from the database
return(paste0(table, " does not exist"))
}
}
check_table("member_details", database)
check_table(database, "member_details")
min(health_data$proportion_good)
max(health_data$proportion_good)
disability_hh <- read_csv("TS040-2021-3-filtered-2023-12-31T17_15_12Z.csv")
disability_hh <- read_csv("data/TS040-2021-3-filtered-2023-12-31T17_15_12Z.csv")
disability_hh_processed <- disability_hh %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
proportion_good = sum(Observation[
`Number of disabled people in household (4 categories)` %in%
c("1 person disabled under the Equality Act in household",
"2 or more people disabled under the Equality Act in household")]) /
sum(Observation)
) %>%
ungroup()
disability_hh_processed
min(disability_hh_processed$proportion_good)
max(disability_hh_processed$proportion_good)
diability_data <- left_join(member_constituencies,
disability_hh_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
disability_data <- left_join(member_constituencies,
disability_hh_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
#MAY NEED TO DELETE
ggplot(disability_hh_processed, aes(x = proportion_good,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
disability_data
#MAY NEED TO DELETE
ggplot(disability_data, aes(x = proportion_good,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
constituencies_shp_merged <- constituencies_shp %>%
left_join(disability_data,
by = join_by(PCON21NM == asking_member_from)) %>%
#remove rows that are not a aprt of our analysis
filter(!is.na(region))
disability_map <- tm_shape(constituencies_shp_merged) +
tm_borders() +
tm_fill(
col = "proportion_good",
palette = "Blues",  # Choose a color palette
style = "cont",
alpha = 0.7
) +
tm_layout(title = "Constituency Map")
tmap_arrange(parties, health_map, ncol = 2)
tmap_arrange(parties, disability_map, ncol = 2)
tmap_arrange(parties, disability_map, ncol = 2)
tmap_arrange(parties, disability_map, ncol = 2)
parties <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "proportion_health_welfare") +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
tmap_arrange(parties, disability_map, ncol = 2)
parties <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "proportion_health_welfare", palette = "Blues") +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
disability_map <- tm_shape(constituencies_shp_merged) +
tm_borders() +
tm_fill(
col = "proportion_good",
palette = "Blues",  # Choose a color palette
style = "cont",
alpha = 1
) +
tm_layout(title = "Constituency Map") +
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
tmap_arrange(parties, disability_map, ncol = 2)
parties <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "proportion_health_welfare", palette = "Blues") +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
parties
constituencies_shp_merged
parties <- tm_shape(constituencies_shp_merged) +
tm_borders(lwd=0.3) +
tm_fill(col = "health_welfare_proportion", palette = "Blues") +
tm_layout(title = "Constituency Map") +
# Highlight Wales with a thicker border
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
disability_map <- tm_shape(constituencies_shp_merged) +
tm_borders() +
tm_fill(
col = "proportion_good",
palette = "Blues",  # Choose a color palette
style = "cont",
alpha = 1
) +
tm_layout(title = "Constituency Map") +
tm_shape(constituencies_shp_merged[constituencies_shp_merged$region == "Wales", ]) +
tm_borders(lwd=1)
tmap_arrange(parties, disability_map, ncol = 2)
data <- disability_data %>%
select(proportion_good, health_welfare_proportion, asking_member_party, region)
# Calculate the correlation matrix
correlation_matrix <- cor(data)
library(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library("corrplot")
# Calculate the correlation matrix
correlation_matrix <- corrplot::cor(data)
# Calculate the correlation matrix
correlation_matrix <- cor(data)
data <- disability_data %>%
select(proportion_good, health_welfare_proportion, asking_member_party)
# Calculate the correlation matrix
correlation_matrix <- cor(data)
data <- disability_data %>%
select(proportion_good, health_welfare_proportion, asking_member_party, region)
# Calculate the correlation matrix
correlation_matrix <- cor(data)
data <- disability_data %>%
select(proportion_good, health_welfare_proportion)
# Calculate the correlation matrix
correlation_matrix <- cor(data)
# Visualize the correlation matrix as a heatmap
corrplot(correlation_matrix, method = "color", addCoef.col = "black", type = "upper", order = "hclust")
avg_intensity <- aggregate(health_welfare_proportion ~ asking_member_party + region, data = disability_data, FUN = mean)
# Create a bar chart using ggplot2
ggplot(avg_intensity, aes(x = region, y = health_welfare_proportion, fill = asking_member_party)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Intensity of Questions by Political Affiliation and Region",
x = "Region",
y = "Average Intensity of Questions") +
theme_minimal()
disability_data
avg_intensity <- aggregate(health_welfare_proportion ~ asking_member_party + asking_member_from, data = disability_data, FUN = mean)
# Create a bar chart using ggplot2
ggplot(avg_intensity, aes(x = asking_member_from, y = health_welfare_proportion, fill = asking_member_party)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Intensity of Questions by Political Affiliation and Region",
x = "Region",
y = "Average Intensity of Questions") +
theme_minimal()
tmap_arrange(parties, disability_map, ncol = 2)
disability_hh_processed <- disability_hh %>%
group_by(`Westminster Parliamentary constituencies`) %>%
summarise(
disabled_proportion = sum(Observation[
`Number of disabled people in household (4 categories)` %in%
c("1 person disabled under the Equality Act in household",
"2 or more people disabled under the Equality Act in household")]) /
sum(Observation)
) %>%
ungroup()
disability_data <- left_join(member_constituencies,
disability_hh_processed,
by = c("asking_member_from" = "Westminster Parliamentary constituencies"))
disability_data_filtered <- disability_data %>%
subset(disabled_proportion <= .3)
#MAY NEED TO DELETE
ggplot(disability_data, aes(x = proportion_good,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
#MAY NEED TO DELETE
ggplot(disability_data, aes(x = disabled_proportion,
y = health_welfare_proportion,
color = asking_member_party)) +
geom_point() +
facet_wrap(~ region) +
ggtitle("Scatter Plots for Each Category") +
theme_minimal()
avg_intensity <- aggregate(health_welfare_proportion ~ asking_member_party + asking_member_from, data = disability_data_filtered, FUN = mean)
# Create a bar chart using ggplot2
ggplot(avg_intensity, aes(x = asking_member_from, y = health_welfare_proportion, fill = asking_member_party)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Intensity of Questions by Political Affiliation and Region",
x = "Region",
y = "Average Intensity of Questions") +
theme_minimal()
avg_intensity <- aggregate(health_welfare_proportion ~ asking_member_party + region, data = disability_data_filtered, FUN = mean)
# Create a bar chart using ggplot2
ggplot(avg_intensity, aes(x = region, y = health_welfare_proportion, fill = asking_member_party)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Intensity of Questions by Political Affiliation and Region",
x = "Region",
y = "Average Intensity of Questions") +
theme_minimal()
